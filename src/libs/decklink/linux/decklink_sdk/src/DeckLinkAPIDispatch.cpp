/* -LICENSE-START-
** Copyright (c) 2009 Blackmagic Design
**
** Permission is hereby granted, free of charge, to any person or organization
** obtaining a copy of the software and accompanying documentation covered by
** this license (the "Software") to use, reproduce, display, distribute,
** execute, and transmit the Software, and to prepare derivative works of the
** Software, and to permit third-parties to whom the Software is furnished to
** do so, all subject to the following:
**
** The copyright notices in the Software and this entire statement, including
** the above license grant, this restriction and the following disclaimer,
** must be included in all copies of the Software, in whole or in part, and
** all derivative works of the Software, unless such copies or derivative
** works are solely in the form of machine-executable object code generated by
** a source language processor.
**
** THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
** IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
** FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
** SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
** FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
** ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
** DEALINGS IN THE SOFTWARE.
** -LICENSE-END-
**/

#include <dlfcn.h>
#include <pthread.h>
#include <iostream>

#include "decklink_sdk/DeckLinkAPI.h"

#define kDeckLinkAPI_Name "libDeckLinkAPI.so"
#define KDeckLinkPreviewAPI_Name "libDeckLinkPreviewAPI.so"

typedef IDeckLinkIterator* (*CreateIteratorFunc)();
typedef IDeckLinkAPIInformation* (*CreateAPIInformationFunc)();
typedef IDeckLinkGLScreenPreviewHelper* (*CreateOpenGLScreenPreviewHelperFunc)();
typedef IDeckLinkVideoConversion* (*CreateVideoConversionInstanceFunc)();
typedef IDeckLinkDiscovery* (*CreateDeckLinkDiscoveryInstanceFunc)();

static pthread_once_t gDeckLinkOnceControl = PTHREAD_ONCE_INIT;
static pthread_once_t gPreviewOnceControl = PTHREAD_ONCE_INIT;

static bool gLoadedDeckLinkAPI = false;

static CreateIteratorFunc gCreateIteratorFunc = nullptr;
static CreateAPIInformationFunc gCreateAPIInformationFunc = nullptr;
static CreateOpenGLScreenPreviewHelperFunc gCreateOpenGLPreviewFunc = nullptr;
static CreateVideoConversionInstanceFunc gCreateVideoConversionFunc = nullptr;
static CreateDeckLinkDiscoveryInstanceFunc gCreateDeckLinkDiscoveryFunc = nullptr;

void InitDeckLinkAPI() {
  void* libraryHandle;

  libraryHandle = dlopen(kDeckLinkAPI_Name, RTLD_NOW | RTLD_GLOBAL);
  if (libraryHandle == nullptr) {
    std::cerr << dlerror() << std::endl;
    return;
  }

  gLoadedDeckLinkAPI = true;

  gCreateIteratorFunc = reinterpret_cast<CreateIteratorFunc>(
      dlsym(libraryHandle, "CreateDeckLinkIteratorInstance_0002"));
  if (gCreateIteratorFunc == nullptr) {
    std::cerr << dlerror() << std::endl;
  }
  gCreateAPIInformationFunc = reinterpret_cast<CreateAPIInformationFunc>(
      dlsym(libraryHandle, "CreateDeckLinkAPIInformationInstance_0001"));
  if (gCreateAPIInformationFunc == nullptr) {
    std::cerr << dlerror() << std::endl;
  }
  gCreateVideoConversionFunc = reinterpret_cast<CreateVideoConversionInstanceFunc>(
      dlsym(libraryHandle, "CreateVideoConversionInstance_0001"));
  if (gCreateVideoConversionFunc == nullptr) {
    std::cerr << dlerror() << std::endl;
  }
  gCreateDeckLinkDiscoveryFunc = reinterpret_cast<CreateDeckLinkDiscoveryInstanceFunc>(
      dlsym(libraryHandle, "CreateDeckLinkDiscoveryInstance_0001"));
  if (gCreateDeckLinkDiscoveryFunc == nullptr) {
    std::cerr << dlerror() << std::endl;
  }
}

void InitDeckLinkPreviewAPI() {
  void* libraryHandle;

  libraryHandle = dlopen(KDeckLinkPreviewAPI_Name, RTLD_NOW | RTLD_GLOBAL);
  if (libraryHandle == nullptr) {
    std::cerr << dlerror() << std::endl;
    return;
  }
  gCreateOpenGLPreviewFunc = reinterpret_cast<CreateOpenGLScreenPreviewHelperFunc>(
      dlsym(libraryHandle, "CreateOpenGLScreenPreviewHelper_0001"));
  if (gCreateOpenGLPreviewFunc == nullptr) {
    std::cerr << dlerror() << std::endl;
  }
}

bool IsDeckLinkAPIPresent() {
  // If the DeckLink API dynamic library was successfully loaded, return this
  // knowledge to the caller
  return gLoadedDeckLinkAPI;
}

IDeckLinkIterator* CreateDeckLinkIteratorInstance() {
  pthread_once(&gDeckLinkOnceControl, InitDeckLinkAPI);

  if (gCreateIteratorFunc == nullptr) {
    return nullptr;
  }
  return gCreateIteratorFunc();
}

IDeckLinkAPIInformation* CreateDeckLinkAPIInformationInstance() {
  pthread_once(&gDeckLinkOnceControl, InitDeckLinkAPI);

  if (gCreateAPIInformationFunc == nullptr) {
    return nullptr;
  }
  return gCreateAPIInformationFunc();
}

IDeckLinkGLScreenPreviewHelper* CreateOpenGLScreenPreviewHelper() {
  pthread_once(&gDeckLinkOnceControl, InitDeckLinkAPI);
  pthread_once(&gPreviewOnceControl, InitDeckLinkPreviewAPI);

  if (gCreateOpenGLPreviewFunc == nullptr) {
    return nullptr;
  }
  return gCreateOpenGLPreviewFunc();
}

IDeckLinkVideoConversion* CreateVideoConversionInstance() {
  pthread_once(&gDeckLinkOnceControl, InitDeckLinkAPI);

  if (gCreateVideoConversionFunc == nullptr) {
    return nullptr;
  }
  return gCreateVideoConversionFunc();
}

IDeckLinkDiscovery* CreateDeckLinkDiscoveryInstance() {
  pthread_once(&gDeckLinkOnceControl, InitDeckLinkAPI);

  if (gCreateDeckLinkDiscoveryFunc == nullptr) {
    return nullptr;
  }
  return gCreateDeckLinkDiscoveryFunc();
}
